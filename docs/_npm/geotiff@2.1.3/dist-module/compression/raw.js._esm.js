/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/geotiff@2.1.3/dist-module/compression/raw.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
function e(e,t){let r=e.length-t,n=0;do{for(let r=t;r>0;r--)e[n+t]+=e[n],n++;r-=t}while(r>0)}function t(e,t,r){let n=0,o=e.length;const i=o/r;for(;o>t;){for(let r=t;r>0;--r)e[n+t]+=e[n],++n;o-=t}const l=e.slice();for(let t=0;t<i;++t)for(let n=0;n<r;++n)e[r*t+n]=l[(r-n-1)*i+t]}class r{async decode(r,n){const o=await this.decodeBlock(n),i=r.Predictor||1;if(1!==i){const n=!r.StripOffsets;return function(r,n,o,i,l,s){if(!n||1===n)return r;for(let e=0;e<l.length;++e){if(l[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(l[e]!==l[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const a=l[0]/8,c=2===s?1:l.length;for(let s=0;s<i&&!(s*c*o*a>=r.byteLength);++s){let i;if(2===n){switch(l[0]){case 8:i=new Uint8Array(r,s*c*o*a,c*o*a);break;case 16:i=new Uint16Array(r,s*c*o*a,c*o*a/2);break;case 32:i=new Uint32Array(r,s*c*o*a,c*o*a/4);break;default:throw new Error(`Predictor 2 not allowed with ${l[0]} bits per sample.`)}e(i,c)}else 3===n&&(i=new Uint8Array(r,s*c*o*a,c*o*a),t(i,c,a))}return r}(o,i,n?r.TileWidth:r.ImageWidth,n?r.TileLength:r.RowsPerStrip||r.ImageLength,r.BitsPerSample,r.PlanarConfiguration)}return o}}class n extends r{decodeBlock(e){return e}}export{n as default};
