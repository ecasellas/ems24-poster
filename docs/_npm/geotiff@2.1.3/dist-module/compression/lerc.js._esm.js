/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/geotiff@2.1.3/dist-module/compression/lerc.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{inflate as e}from"../../../pako@2.1.0/_esm.js";import r from"../../../lerc@3.0.0/_esm.js";import{ZSTDDecoder as t}from"../../../zstddec@0.1.0/_esm.js";function n(e,r){let t=e.length-r,n=0;do{for(let t=r;t>0;t--)e[n+r]+=e[n],n++;t-=r}while(t>0)}function o(e,r,t){let n=0,o=e.length;const i=o/t;for(;o>r;){for(let t=r;t>0;--t)e[n+r]+=e[n],++n;o-=r}const s=e.slice();for(let r=0;r<i;++r)for(let n=0;n<t;++n)e[t*r+n]=s[(t-n-1)*i+r]}class i{async decode(e,r){const t=await this.decodeBlock(r),i=e.Predictor||1;if(1!==i){const r=!e.StripOffsets;return function(e,r,t,i,s,a){if(!r||1===r)return e;for(let e=0;e<s.length;++e){if(s[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(s[e]!==s[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const l=s[0]/8,d=2===a?1:s.length;for(let a=0;a<i&&!(a*d*t*l>=e.byteLength);++a){let i;if(2===r){switch(s[0]){case 8:i=new Uint8Array(e,a*d*t*l,d*t*l);break;case 16:i=new Uint16Array(e,a*d*t*l,d*t*l/2);break;case 32:i=new Uint32Array(e,a*d*t*l,d*t*l/4);break;default:throw new Error(`Predictor 2 not allowed with ${s[0]} bits per sample.`)}n(i,d)}else 3===r&&(i=new Uint8Array(e,a*d*t*l,d*t*l),o(i,d,l))}return e}(t,i,r?e.TileWidth:e.ImageWidth,r?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return t}}const s=1,a=0,l=1,d=2,c=new t;class f extends i{constructor(e){super(),this.planarConfiguration=void 0!==e.PlanarConfiguration?e.PlanarConfiguration:1,this.samplesPerPixel=void 0!==e.SamplesPerPixel?e.SamplesPerPixel:1,this.addCompression=e.LercParameters[s]}decodeBlock(t){switch(this.addCompression){case a:break;case l:t=e(new Uint8Array(t)).buffer;break;case d:t=c.decode(new Uint8Array(t)).buffer;break;default:throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`)}return r.decode(t,{returnPixelInterleavedDims:1===this.planarConfiguration}).pixels[0].buffer}}export{f as default,c as zstd};
