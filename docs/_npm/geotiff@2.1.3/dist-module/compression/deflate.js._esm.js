/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/geotiff@2.1.3/dist-module/compression/deflate.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{inflate as e}from"../../../pako@2.1.0/_esm.js";function t(e,t){let r=e.length-t,n=0;do{for(let r=t;r>0;r--)e[n+t]+=e[n],n++;r-=t}while(r>0)}function r(e,t,r){let n=0,o=e.length;const i=o/r;for(;o>t;){for(let r=t;r>0;--r)e[n+t]+=e[n],++n;o-=t}const l=e.slice();for(let t=0;t<i;++t)for(let n=0;n<r;++n)e[r*t+n]=l[(r-n-1)*i+t]}class n{async decode(e,n){const o=await this.decodeBlock(n),i=e.Predictor||1;if(1!==i){const n=!e.StripOffsets;return function(e,n,o,i,l,a){if(!n||1===n)return e;for(let e=0;e<l.length;++e){if(l[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(l[e]!==l[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const s=l[0]/8,c=2===a?1:l.length;for(let a=0;a<i&&!(a*c*o*s>=e.byteLength);++a){let i;if(2===n){switch(l[0]){case 8:i=new Uint8Array(e,a*c*o*s,c*o*s);break;case 16:i=new Uint16Array(e,a*c*o*s,c*o*s/2);break;case 32:i=new Uint32Array(e,a*c*o*s,c*o*s/4);break;default:throw new Error(`Predictor 2 not allowed with ${l[0]} bits per sample.`)}t(i,c)}else 3===n&&(i=new Uint8Array(e,a*c*o*s,c*o*s),r(i,c,s))}return e}(o,i,n?e.TileWidth:e.ImageWidth,n?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return o}}class o extends n{decodeBlock(t){return e(new Uint8Array(t)).buffer}}export{o as default};
