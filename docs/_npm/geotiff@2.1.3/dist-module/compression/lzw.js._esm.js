/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/geotiff@2.1.3/dist-module/compression/lzw.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
function e(e,t){let n=e.length-t,r=0;do{for(let n=t;n>0;n--)e[r+t]+=e[r],r++;n-=t}while(n>0)}function t(e,t,n){let r=0,o=e.length;const i=o/n;for(;o>t;){for(let n=t;n>0;--n)e[r+t]+=e[r],++r;o-=t}const l=e.slice();for(let t=0;t<i;++t)for(let r=0;r<n;++r)e[n*t+r]=l[(n-r-1)*i+t]}class n{async decode(n,r){const o=await this.decodeBlock(r),i=n.Predictor||1;if(1!==i){const r=!n.StripOffsets;return function(n,r,o,i,l,s){if(!r||1===r)return n;for(let e=0;e<l.length;++e){if(l[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(l[e]!==l[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const c=l[0]/8,f=2===s?1:l.length;for(let s=0;s<i&&!(s*f*o*c>=n.byteLength);++s){let i;if(2===r){switch(l[0]){case 8:i=new Uint8Array(n,s*f*o*c,f*o*c);break;case 16:i=new Uint16Array(n,s*f*o*c,f*o*c/2);break;case 32:i=new Uint32Array(n,s*f*o*c,f*o*c/4);break;default:throw new Error(`Predictor 2 not allowed with ${l[0]} bits per sample.`)}e(i,f)}else 3===r&&(i=new Uint8Array(n,s*f*o*c,f*o*c),t(i,f,c))}return n}(o,i,r?n.TileWidth:n.ImageWidth,r?n.TileLength:n.RowsPerStrip||n.ImageLength,n.BitsPerSample,n.PlanarConfiguration)}return o}}const r=257;function o(e,t){for(let n=t.length-1;n>=0;n--)e.push(t[n]);return e}function i(e){const t=new Uint16Array(4093),n=new Uint8Array(4093);for(let e=0;e<=257;e++)t[e]=4096,n[e]=e;let i=258,l=9,s=0;function c(){i=258,l=9}function f(e){const t=function(e,t,n){const o=t%8,i=Math.floor(t/8),l=8-o,s=t+n-8*(i+1);let c=8*(i+2)-(t+n);const f=8*(i+2)-t;if(c=Math.max(0,c),i>=e.length)return console.warn("ran off the end of the buffer before finding EOI_CODE (end on input code)"),r;let a=e[i]&2**(8-o)-1;a<<=n-l;let h=a;if(i+1<e.length){let t=e[i+1]>>>c;t<<=Math.max(0,n-f),h+=t}if(s>8&&i+2<e.length){const r=8*(i+3)-(t+n);h+=e[i+2]>>>r}return h}(e,s,l);return s+=l,t}function a(e,r){return n[i]=r,t[i]=e,i++,i-1}function h(e){const r=[];for(let o=e;4096!==o;o=t[o])r.push(n[o]);return r}const u=[];c();const d=new Uint8Array(e);let w,g=f(d);for(;g!==r;){if(256===g){for(c(),g=f(d);256===g;)g=f(d);if(g===r)break;if(g>256)throw new Error(`corrupted code at scanline ${g}`);o(u,h(g)),w=g}else if(g<i){const e=h(g);o(u,e),a(w,e[e.length-1]),w=g}else{const e=h(w);if(!e)throw new Error(`Bogus entry. Not in dictionary, ${w} / ${i}, position: ${s}`);o(u,e),u.push(e[e.length-1]),a(w,e[e.length-1]),w=g}i+1>=2**l&&(12===l?w=void 0:l++),g=f(d)}return new Uint8Array(u)}class l extends n{decodeBlock(e){return i(e).buffer}}export{l as default};
